import time
from typing import Optional

import telebot as tb # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É telebot(–î–ª—è –±–æ—Ç–∞ –¢–µ–ª–µ–≥—Ä–∞–º)
from telebot import types # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑ telebot —Ç–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö
import ultralytics # –ü–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∏ –æ–±—É—á–∞—Ç—å –Ω–µ–π—Ä–æ—Å–µ—Ç—å
import cv2 # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –≤–∏–∑—É–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Ä–∞–±–æ—Ç—É –Ω–µ–π—Ä–æ—Å–µ—Ç–∏
import numpy # –ó–∞–Ω–∏–º–∞–µ—Ç—Å—è –º–∞—Ç–µ–º–∞—Ç–∏–∫–æ–π
import os # –û—Ä–≥–∞–Ω–∏–∑—É–µ—Ç –≤–∑–∞–∏–º–æ—Å–≤—è–∑—å —Å –û–°
import sqlite3 # –†–µ–∞–ª–∏–∑—É–µ—Ç –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
import requests # –ü–æ–∑–≤–æ–ª—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å HTTP –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ API
from googletrans import Translator # Google –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –≤ –∫–æ–¥–µ

import log # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è

import Settings as Sett # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ Settings.py

log.warn(' –°–æ–∑–¥–∞—Ç–µ–ª–∏: –≥—Ä—É–ø–ø–∞ —É—á–∞—â–∏—Ö—Å—è 10–ë –∫–ª–∞—Å—Å–∞ –ì–ë–û–£ —à–∫–æ–ª—ã ‚Ññ1449\n –°–æ–∑–¥–∞–Ω–æ –ø—Ä–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞ –ú–æ—Å–∫–≤—ã\n')

log.error(' –ë–æ—Ç —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç–Ω–æ–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é, –∫—Ä–∞–∂–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –Ω–µ–≥–æ –Ω–∞–∫–∞–∑—É–µ–º–∞ –∑–∞–∫–æ–Ω–æ–º!')


# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ —Å–µ—Ä–≤–µ—Ä–∞–º Telegram
try:
    bot = tb.TeleBot(token=Sett.token)
except Exception as e:
    log.error(' –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Telegram!')
    log.error(' –û—à–∏–±–∫–∞: ' + str(e))
    exit()
# –°–æ–∑–¥–∞—ë–º –º–æ–¥–µ–ª—å YOLO
try:
    Neuro = ultralytics.YOLO(Sett.bestptpath)
except Exception as e:
    log.error(' –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏!')
    log.error(' –û—à–∏–±–∫–∞: ' + str(e))
    exit()

try:
    translator = Translator()
except Exception as e:
    log.error(' –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –º–æ–¥–µ–ª—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏!')
    log.error(' –û—à–∏–±–∫–∞: ' + str(e))
    exit()


# –ü–æ–¥–∫–ª—é—á–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
try:
    con = sqlite3.connect('users.db', check_same_thread=False)
    cur = con.cursor()
except Exception as e:
    log.error(' –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö!')
    log.error(' –û—à–∏–±–∫–∞: ' + str(e))
    exit()

log.line()
log.ok(' Telegram –ø–æ–¥–∫–ª—é—á–µ–Ω, –º–æ–¥–µ–ª—å –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ —Å–æ–∑–¥–∞–Ω–∞ –∏ –∏—Å–ø—Ä–∞–≤–Ω–∞')
log.line()
log.ok(' –ë–æ—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!')
log.line()

scan = []
names = [['Egg', '–Ø–π—Ü–∞'], ['Tomato', '–¢–æ–º–∞—Ç—ã'], ['Apple', '–Ø–±–ª–æ–∫–æ'], ['Carrot','–ú–æ—Ä–∫–æ–≤—å'], ['Cabbagge','–ö–∞–ø—É—Å—Ç–∞']] # –ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è –∫–ª–∞—Å—Å–æ–≤
headers = {
	"x-rapidapi-key": "83bea0c1aemshf3acc255469d487p11e045jsn542c6a5fc5ec",
	"x-rapidapi-host": "recipe-by-api-ninjas.p.rapidapi.com"
}


# –ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
def process(image_path: Optional[str]):
    """–§—É–Ω–∫—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, –Ω–∞ –≤—ã—Ö–æ–¥ –ø–æ–¥–∞—é—Ç—Å—è –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: [{ClassName:Count}]

    :param image_path: –°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫—É –≤ –≤–∏–¥–µ —Ç–µ–∫—Å—Ç–∞.
    :type image_path: Optional[str]

    :return: –ö–ª–∞—Å—Å—ã –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—ä–µ–∫—Ç–æ–≤ –≤ –Ω–∏—Ö
    """
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    img = cv2.imread(image_path)
    log.ok('–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ' + image_path)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
    results = Neuro(img, verbose=False)[0] # verbose=False –æ—Ç–∫–ª—é—á–∞–µ—Ç –Ω–µ–Ω—É–∂–Ω—ã–π –≤—ã–≤–æ–¥ –≤ output
    log.ok('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ' + image_path + ' —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é')
    # –ö–ª–∞—Å—Å—ã
    classes = results.boxes.cls.cpu().numpy()
    # –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∫–ª–∞—Å—Å—ã –≤ –≤–∏–¥–µ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–æ–≤(–∏—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ x1, y1, x2, y2)
    boxes = results.boxes.xyxy.cpu().numpy().astype(numpy.int32)
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ª–æ–≤–∞—Ä—è –¥–ª—è –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∫–ª–∞—Å—Å–∞–º
    grouped_objects = {}

    # –†–∏—Å–æ–≤–∞–Ω–∏–µ —Ä–∞–º–æ–∫ –∏ –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    for class_id, box in zip(classes, boxes): # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∞
        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã
        class_name = Sett.names[int(class_id)] # –ù–∞–∑–Ω–∞—á–∞–µ–º –∏–º—è –∫–ª–∞—Å—Å–∞
        color = Sett.colors[int(class_id) % len(Sett.colors)]  # –í—ã–±–∏—Ä–∞–µ–º —Ü–≤–µ—Ç –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∞

        # –ï—Å–ª–∏ –∏–º—è –∫–ª–∞—Å—Å–∞ –µ—â—ë –Ω–µ –æ–±—ä—è–≤–ª–µ–Ω–æ –≤ grouped_objects, —Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –ø—É—Å—Ç—ã–º –º–∞—Å—Å–∏–≤–æ–º
        if class_name not in grouped_objects:
            grouped_objects[class_name] = []
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ grouped_objects –∫–≤–∞–¥—Ä–∞—Ç–∏–∫, —É–∫–∞–∑—ã–≤–∞—è –µ–≥–æ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã(box)
        grouped_objects[class_name].append(box)

        # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Ö—Ä–∞–Ω—è—â–∏–µ –≤ —Å–µ–±–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∞
        x1, y1, x2, y2 = box
        # –†–∏—Å–æ–≤–∞–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∞
        cv2.rectangle(img, (x1, y1), (x2, y2), color, 2)
        # –†–∏—Å–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ–±–æ–∑–Ω–∞—á–∞—é—â–µ–≥–æ –∏–º—è –∫–ª–∞—Å—Å–∞
        cv2.putText(img, class_name, (x1, y1 - 8), cv2.FONT_HERSHEY_COMPLEX, 0.6, (15, 15, 15), 1)
    log.ok('–ö–ª–∞—Å—Å—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω—ã')
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    cv2.imwrite(os.path.splitext(image_path)[0] + '_yolo' + os.path.splitext(image_path)[1], img)
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
    classes_name = []
    with open(os.path.splitext(image_path)[0] + '_data.txt', 'w') as file:
        for class_name, details in grouped_objects.items(): # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–ª–∞—Å—Å—ã
            classes_name.append([class_name, 0])
            file.write(f"{class_name}:\n") # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏–º—è –∫–ª–∞—Å—Å–∞
            for detail in details: # –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –∫–≤–∞–¥—Ä–∞—Ç–∏–∫–∏
                for i in classes_name:
                    if i[0] == class_name:
                        i[1] += 1
                file.write(f"Coordinates: ({detail[0]}, {detail[1]}, {detail[2]}, {detail[3]})\n")
    log.warn('–û–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ —Ñ–∞–π–ª—ã:')
    log.warn(f'–ò—Å—Ö–æ–¥–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: /{image_path}')
    log.warn(f'–ö–æ–Ω–µ—á–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: /{os.path.splitext(image_path)[0]}_yolo{os.path.splitext(image_path)[1]}')
    log.warn(f'–î–∞–Ω–Ω—ã–µ –æ –∫–ª–∞—Å—Å–∞—Ö: /{os.path.splitext(image_path)[0]}_data.txt')
    return classes_name

@bot.message_handler(commands=['start']) #–§—É–Ω–∫—Ü–∏—è –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –∫–æ–º–∞–Ω–¥—É start(–¢–æ –µ—Å—Ç—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ "–°—Ç–∞—Ä—Ç")
def start(message):
    #bot.delete_message(message.chat.id,message.id)
    chat_id = message.chat.id
    message_id = message.message_id-1
    for i in range(1, 50):
        # noinspection PyBroadException
        try:
            bot.delete_message(chat_id, message_id)
        except:
            pass
        message_id = message_id - 1
    bot.delete_message(chat_id, message.message_id)
    res = cur.execute(f"SELECT * FROM users WHERE id = \'{message.from_user.id}\'")
    if res.fetchone():
        keyboard = types.InlineKeyboardMarkup()
        key_menu = types.InlineKeyboardButton(text='–ú–µ–Ω—é', callback_data='menu')
        keyboard.add(key_menu)
        bot.send_message(message.chat.id, '<b>–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø —É–∂–µ –∑–Ω–∞—é —Ç–µ–±—è, –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –ú–µ–Ω—é, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –≤ –º–µ–Ω—é!</b>', parse_mode='HTML', reply_markup=keyboard)
        return
    cur.execute(f"INSERT INTO users VALUES ('','',{message.from_user.id})")
    con.commit()
    log.ok(f'–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.first_name} {message.from_user.last_name}')
    txt = '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç –∏–∑ –ª—é–±–æ–≥–æ –Ω–∞–±–æ—Ä–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤!\n–ß—Ç–æ –º–Ω–µ –Ω—É–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã? –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–π–¥–∏ –Ω–µ–±–æ–ª—å—à–æ–µ –∞–Ω–∫–µ—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ, –∞ –∑–∞—Ç–µ–º —É–∂–µ —Å–º–æ–∂–µ–º –Ω–∞—á–∏–Ω–∞—Ç—å'
    keyboard = types.InlineKeyboardMarkup() # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞
    key_go = types.InlineKeyboardButton(text='–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∞–Ω–∫–µ—Ç—É', callback_data='anketa_start')
    keyboard.add(key_go)
    bot.send_message(message.chat.id, txt, reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == 'anketa_start' or call.data == 'anketa_kuxna')
def anketa_kuxna(call):
    txt = '–†–∞—Å—Å–∫–∞–∂–∏ –æ —Ç–æ–º, –∫–∞–∫—É—é –∫—É—Ö–Ω—é —Ç—ã –ª—é–±–∏—à—å:\n–í—ã–±–µ—Ä–∏ —Å—Ä–µ–¥–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—à—å –ø–æ–ª—É—á–∏—Ç—å'
    keyboard = types.InlineKeyboardMarkup()
    key_russian = types.InlineKeyboardButton(text='üá∑üá∫–†—É—Å—Å–∫–∞—è', callback_data='russian')
    key_usa = types.InlineKeyboardButton(text='üá∫üá∏–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è', callback_data='usa')
    key_france = types.InlineKeyboardButton(text='üá´üá∑–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è', callback_data='france')
    keyboard.add(key_russian, key_usa, key_france)
    bot.edit_message_text(txt, call.message.chat.id, call.message.message_id)
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, '', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == 'russian')
def russian(call):
    cur.execute(f"UPDATE users SET kuxna = 'russian' WHERE id = {call.from_user.id}")
    con.commit()
    log.ok(f'{call.from_user.first_name} {call.from_user.last_name} –≤—ã–±—Ä–∞–ª –†—É—Å—Å–∫—É—é –∫—É—Ö–Ω—é')
    txt = '–¢—ã –≤—ã–±—Ä–∞–ª –†—É—Å—Å–∫—É—é –∫—É—Ö–Ω—é, –≤—Å—ë –≤–µ—Ä–Ω–æ, –∏–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á—Ç–æ-—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?'
    keyboard = types.InlineKeyboardMarkup()
    key_ok = types.InlineKeyboardButton(text='–í—Å—ë –≤–µ—Ä–Ω–æ', callback_data='ok_kuxna')
    key_error = types.InlineKeyboardButton(text='–ò—Å–ø—Ä–∞–≤–∏—Ç—å', callback_data='error_kuxna')
    keyboard.add(key_ok, key_error)
    bot.edit_message_text(txt, call.message.chat.id, call.message.message_id)
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, '', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == 'usa')
def usa(call):
    cur.execute(f"UPDATE users SET kuxna = 'usa' WHERE id = {call.from_user.id}")
    con.commit()
    log.ok(f'{call.from_user.first_name} {call.from_user.last_name} –≤—ã–±—Ä–∞–ª –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫—É—é –∫—É—Ö–Ω—é')
    txt = '–¢—ã –≤—ã–±—Ä–∞–ª –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫—É—é –∫—É—Ö–Ω—é, –≤—Å—ë –≤–µ—Ä–Ω–æ, –∏–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á—Ç–æ-—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?'
    keyboard = types.InlineKeyboardMarkup()
    key_ok = types.InlineKeyboardButton(text='–í—Å—ë –≤–µ—Ä–Ω–æ', callback_data='ok_kuxna')
    key_error = types.InlineKeyboardButton(text='–ò—Å–ø—Ä–∞–≤–∏—Ç—å', callback_data='error_kuxna')
    keyboard.add(key_ok, key_error)
    bot.edit_message_text(txt, call.message.chat.id, call.message.message_id)
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, '', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == 'usa')
def usa(call):
    cur.execute(f"UPDATE users SET kuxna = 'usa' WHERE id = {call.from_user.id}")
    con.commit()
    log.ok(f'{call.from_user.first_name} {call.from_user.last_name} –≤—ã–±—Ä–∞–ª –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫—É—é –∫—É—Ö–Ω—é')
    txt = '–¢—ã –≤—ã–±—Ä–∞–ª –ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫—É—é –∫—É—Ö–Ω—é, –≤—Å—ë –≤–µ—Ä–Ω–æ, –∏–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á—Ç–æ-—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?'
    keyboard = types.InlineKeyboardMarkup()
    key_ok = types.InlineKeyboardButton(text='–í—Å—ë –≤–µ—Ä–Ω–æ', callback_data='ok_kuxna')
    key_error = types.InlineKeyboardButton(text='–ò—Å–ø—Ä–∞–≤–∏—Ç—å', callback_data='error_kuxna')
    keyboard.add(key_ok, key_error)
    bot.edit_message_text(txt, call.message.chat.id, call.message.message_id)
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, '', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == 'france')
def france(call):
    cur.execute(f"UPDATE users SET kuxna = 'france' WHERE id = {call.from_user.id}")
    con.commit()
    log.ok(f'{call.from_user.first_name} {call.from_user.last_name} –≤—ã–±—Ä–∞–ª –§—Ä–∞–Ω—Ü—É–∑—Å–∫—É—é –∫—É—Ö–Ω—é')
    txt = '–¢—ã –≤—ã–±—Ä–∞–ª –§—Ä–∞–Ω—Ü—É–∑—Å–∫—É—é –∫—É—Ö–Ω—é, –≤—Å—ë –≤–µ—Ä–Ω–æ, –∏–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —á—Ç–æ-—Ç–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å?'
    keyboard = types.InlineKeyboardMarkup()
    key_ok = types.InlineKeyboardButton(text='–í—Å—ë –≤–µ—Ä–Ω–æ', callback_data='ok_kuxna')
    key_error = types.InlineKeyboardButton(text='–ò—Å–ø—Ä–∞–≤–∏—Ç—å', callback_data='error_kuxna')
    keyboard.add(key_ok, key_error)
    bot.edit_message_text(txt, call.message.chat.id, call.message.message_id)
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, '', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == 'ok_kuxna')
def ok_kuxna(call):
    log.ok(f'{call.from_user.first_name} {call.from_user.last_name} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≤—ã–±–æ—Ä –∫—É—Ö–Ω–∏')
    bot.edit_message_text('–û—Ç–ª–∏—á–Ω–æ, —Ä–∞–∑ –≤—Å—ë –æ–∫–µ–π —Ç–æ –ø–æ–≥–Ω–∞–ª–∏ –¥–∞–ª—å—à–µ!', call.message.chat.id, call.message.message_id)
    time.sleep(1.5)
    bot.register_next_step_handler(call.message, anketa_allergia(call))

@bot.callback_query_handler(func=lambda call: call.data == 'error_kuxna')
def error_kuxna(call):
    log.ok(f'{call.from_user.first_name} {call.from_user.last_name} –æ—Ç–º–µ–Ω–∏–ª –≤—ã–±–æ—Ä –∫—É—Ö–Ω–∏')
    bot.edit_message_text('–ü–æ–ø—Ä–æ–±—É–π –≤—ã–±—Ä–∞—Ç—å –µ—â—ë —Ä–∞–∑', call.message.chat.id, call.message.message_id)
    time.sleep(1.5)
    anketa_kuxna(call)

def anketa_allergia(call):
    res = cur.execute(f"SELECT allergia FROM users WHERE id = {call.from_user.id}")
    fetch = str(res.fetchone()[0])
    if fetch is None:
        return
    log.ok(f'{call.from_user.first_name} {call.from_user.last_name} –Ω–∞—á–∞–ª –∑–∞–ø–æ–ª–Ω—è—Ç—å –∞–ª–ª–µ—Ä–≥–∏–∏')
    txt = '–ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–ª–µ—Ä–≥–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —É —Ç–µ–±—è –µ—Å—Ç—å, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –Ω–µ –≤—ã–¥–∞–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã —Å —ç—Ç–∏–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏\n–í—ã–±–µ—Ä–∏ —Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É —Ç–µ–±—è –∞–ª–ª–µ—Ä–≥–∏—è\n–¢—ã –≤—ã–±—Ä–∞–ª:'
    keyboard = types.InlineKeyboardMarkup()
    key_orex = types.InlineKeyboardButton(text='–û—Ä–µ—Ö–∏', callback_data='allerg_orexi')
    key_moloko = types.InlineKeyboardButton(text='–ú–æ–ª–æ–∫–æ', callback_data='allerg_moloko')
    key_vse = types.InlineKeyboardButton(text='–í—Å—ë –≤—ã–±—Ä–∞–ª', callback_data='allerg_vse')
    keyboard.add(key_orex, key_moloko, key_vse)
    bot.edit_message_text(txt, call.message.chat.id, call.message.message_id)
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, '', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == 'allerg_orexi' or call.data == 'allerg_moloko')
def allerg_all(call):
    ss = {'orexi':'–û—Ä–µ—Ö–∏', 'moloko':'–ú–æ–ª–æ–∫–æ'}
    txt2 = '–ù–∞ —ç—Ç–æ–º —ç—Ç–∞–ø–µ —Ç–µ–±–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç —É–∫–∞–∑–∞—Ç—å –≤—Å–µ –∞–ª–µ—Ä–≥–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —É —Ç–µ–±—è –µ—Å—Ç—å, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –Ω–µ –≤—ã–¥–∞–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç—ã —Å —ç—Ç–∏–º–∏ –ø—Ä–æ–¥—É–∫—Ç–∞–º–∏\n–í—ã–±–µ—Ä–∏ —Ç–µ –ø—Ä–æ–¥—É–∫—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É —Ç–µ–±—è –∞–ª–ª–µ—Ä–≥–∏—è\n–¢—ã –≤—ã–±—Ä–∞–ª:'
    log.ok(f'{call.from_user.first_name} {call.from_user.last_name} –≤—ã–±—Ä–∞–ª –∞–ª–ª–µ—Ä–≥–∏—é {ss[call.data.split('_')[1]]}')
    allergia = cur.execute(f"SELECT allergia FROM users WHERE id = {call.from_user.id}").fetchone()[0]
    print(1)
    print(allergia)
    if not allergia.__contains__(call.data.split('_')[1]):
        allergia += call.data.split('_')[1]+' '
        print(allergia)
    else:
        print(2)
        allergia = allergia.replace(call.data.split('_')[1]+' ', '')
        print(allergia)
    print(allergia)
    time.sleep(0.5)
    cur.execute(f'UPDATE users SET allergia = \'{allergia}\' WHERE id = {call.from_user.id} ')
    con.commit()
    print(allergia.split(' '))
    for i in allergia.split(' '):
        if i:
            txt2 += str(ss[i])
    keyboard = types.InlineKeyboardMarkup()
    key_orex = types.InlineKeyboardButton(text='–û—Ä–µ—Ö–∏', callback_data='allerg_orexi')
    key_moloko = types.InlineKeyboardButton(text='–ú–æ–ª–æ–∫–æ', callback_data='allerg_moloko')
    key_vse = types.InlineKeyboardButton(text='–í—Å—ë –≤—ã–±—Ä–∞–ª', callback_data='allerg_vse')
    keyboard.add(key_orex, key_moloko, key_vse)
    bot.edit_message_text(txt2, call.message.chat.id, call.message.message_id)
    bot.edit_message_reply_markup(call.message.chat.id, call.message.message_id, '', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == 'allerg_vse')
def allerg_vse(call):
    log.ok(f'{call.from_user.first_name} {call.from_user.last_name} –∑–∞–≤–µ—Ä—à–∏–ª –≤—ã–±–æ—Ä –∞–ª–ª–µ—Ä–≥–∏–∏')
    bot.edit_message_text('–ê–ª–ª–µ—Ä–≥–∏–∏ –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥ –≤ –º–µ–Ω—é...', call.message.chat.id, call.message.message_id)
    time.sleep(1.5)
    menu(call)

@bot.callback_query_handler(func=lambda call: call.data == 'menu')
def menu(call):
    keyboard = types.InlineKeyboardMarkup()
    key_profile = types.InlineKeyboardButton(text='–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', callback_data='profile')
    key_scan = types.InlineKeyboardButton(text='–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å', callback_data='scan')
    keyboard.add(key_profile, key_scan)
    bot.edit_message_text(f'<b>–≠—Ç–æ –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞</b>\n–ß—Ç–æ–±—ã –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã –∂–º–∏ "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å"', call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == 'profile')
def profile(call):
    ss = {'orexi': '–û—Ä–µ—Ö–∏', 'moloko': '–ú–æ–ª–æ–∫–æ'}
    kuxna = {'russian': '–†—É—Å—Å–∫–∞—è', 'usa':'–ê–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è', 'france':'–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∞—è'}
    keyboard = types.InlineKeyboardMarkup()
    key_menu = types.InlineKeyboardButton(text='–ú–µ–Ω—é', callback_data='menu')
    key_kuxna = types.InlineKeyboardButton(text='–ó–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞–Ω–æ–≤–æ', callback_data='anketa_kuxna')
    keyboard.add(key_menu, key_kuxna)
    res = cur.execute(f"SELECT kuxna, allergia FROM users WHERE id = {call.from_user.id}")
    fetch = tuple(res.fetchone())
    bot.edit_message_text(f'<b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n'
                          f'–ö—É—Ö–Ω—è: {kuxna[fetch[0]]}\n'
                          f'–ê–ª–ª–µ—Ä–≥–∏–∏: {str([ss[a] for a in fetch[1].split()])}'
                          , call.message.chat.id, call.message.message_id, parse_mode='HTML', reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: call.data == 'scan')
def scaned(call):
    keyboard = types.InlineKeyboardMarkup()
    key_gotovo = types.InlineKeyboardButton(text='–ì–æ—Ç–æ–≤–æ', callback_data='gotovo')
    keyboard.add(key_gotovo)
    bot.edit_message_text(f'–¢–≤–æ—è –∑–∞–¥–∞—á–∞ —Ç–µ–ø–µ—Ä—å:\n–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —á–µ—Ä–µ–∑ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª Telegram, –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–∏—à—å –≤—Å–µ —Ñ–æ—Ç–æ - –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É \"–ì–æ—Ç–æ–≤–æ\"', call.message.chat.id, call.message.message_id, reply_markup=keyboard)
    scan.append(call.from_user.id)

@bot.message_handler(content_types=['photo'])
def image(msg):
    if not scan.__contains__(msg.from_user.id):
        return
    log.ok('–§–æ—Ç–æ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    file_info = bot.get_file(msg.photo[-1].file_id)
    downloaded_file = bot.download_file(file_info.file_path)
    src = 'img/' + msg.photo[-1].file_id + '.jpg'
    with open(src, 'wb') as new_file:
        new_file.write(downloaded_file)
    classes_name = process(src)
    msgtxt = '–Ø –æ–ø—Ä–µ–¥–µ–ª–∏–ª —Ç–∞–∫–∏–µ –ø—Ä–æ–¥—É–∫—Ç—ã:\n'
    print(classes_name)
    for i in classes_name:
        print(i)
        for x in names:
            print(x)
            if x[1] == i[0]:
                print(22)
                msgtxt += f"{x[1]}: {i[1]}\n"
    print(msgtxt)
    bot.send_message(msg.chat.id, msgtxt)
    msgtxt = '–ü—Ä–µ–¥–ª–∞–≥–∞—é —Ç–µ–±–µ —Å–ª–µ–¥—É—é—â–∏–µ —Ä–µ—Ü–µ–ø—Ç—ã:\n'
    response = requests.get("https://recipe-by-api-ninjas.p.rapidapi.com/v1/recipe", headers=headers, params={"query": "Borsh", "offset": "1"})
    js = response.json()
    print(js)
    if len(js) > 3:
        js = js[0:4]
    for i in js:
        print(i['title'])
        translation = translator.translate(i['title'], dest="ru")
        msgtxt += '<b>' + translation.text + ':</b>\n'
        translation = translator.translate(i['ingredients'], dest="ru")
        msgtxt += '<b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b> \n' + translation.text + '\n'
        translation = translator.translate(i['servings'], dest="ru")
        msgtxt += '<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π:</b> \n' + translation.text + '\n'
        translation = translator.translate(i['instructions'], dest="ru")
        msgtxt += '<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é:</b> \n' + translation.text + '\n'
        if len(msgtxt) > 4000:
            #bot.send_message(msg.chat.id, msgtxt2, parse_mode='html')
            msgtxt = ''
            translation = translator.translate(i['title'], dest="ru")
            msgtxt += '<b>' + translation.text + ':</b>\n'
            translation = translator.translate(i['ingredients'], dest="ru")
            msgtxt += '<b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b> \n' + translation.text + '\n'
            translation = translator.translate(i['servings'], dest="ru")
            msgtxt += '<b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ü–∏–π:</b> \n' + translation.text + '\n'
            translation = translator.translate(i['instructions'], dest="ru")
            msgtxt += '<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é:</b> \n' + translation.text + '\n'
    #bot.send_message(msg.chat.id, msgtxt, parse_mode='html')

    bot.send_photo(msg.chat.id, types.InputFile('img/' + msg.photo[-1].file_id + '_yolo.jpg'))
    getmsg(msg)
    clearchat(msg)
    return 1


def clearchat(msg: types.Message):
    res = cur.execute(f"SELECT id FROM msg WHERE chatid = {msg.chat.id}")
    fetch = res.fetchall()
    for i in fetch:
        bot.delete_message(msg.chat.id, i[0])
    cur.execute(f"DELETE FROM msg WHERE chatid = {msg.chat.id}")
    con.commit()

@bot.message_handler()
def getmsg(msg):
    if not msg.from_user.is_bot:
        bot.delete_message(msg.chat.id, msg.message_id)

bot.polling()